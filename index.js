const express = require("express") // Importar o framework express ( gerenciamento de rotas e middlewares )
const app = express() // Criar vÃ¡riavel para facilitar o uso do express
app.use(express.json()) // Avisa o express que iremos usar json por padrÃ£o no body

const uuid = require("uuid") // Importar biblioteca para gerar um id Ãºnico e universal

const port = 3000 // Criar uma variÃ¡vel com a porta a ser ouvida
const orders = [] // Como neste projetos nÃ£o fizemos um banco de dados Ã© necessÃ¡rio criar uma variÃ¡vel para guardar as informaÃ§Ãµes

// Middleware Ã© um interceptador e tem o poder de parar ou rodar uma aplicaÃ§Ã£o. As rotas tbm sÃ£o middlewares.
const checkIdMw = (request, response, next) => {

    const { id } = request.params // VariÃ¡vel para requisitar o id da ordem a ser editada

    const index = orders.findIndex(order => order.id === id) // Verifica dentro da variÃ¡vel ou algum banco de dados se o Id existe

    if (index < 0) {
        return response.status(404).json({ Error: "Order not found" }) // Resposta para quando nÃ£o encontrar o id
    }

    request.orderIndex = index // Verifica se o Id existe
    request.orderId = id // RequisiÃ§Ã£o do Id

    next() // ParÃ¢metro para dar sequÃªncia nas rotas sem para a aplicaÃ§Ã£o
}

const statusMw = (request, response, next) => {

    const metodo = request.method // RequisiÃ§Ã£o do metodo usado na rota
    const url = request.url // RequisiÃ§Ã£o do url usado na rota

    console.log(metodo, url)

    next() // ParÃ¢metro para dar sequÃªncia nas rotas sem para a aplicaÃ§Ã£o
}

// Query params = Filtros
// Route params = Buscar, deletar e atualizar
// Request Body = Mandar informaÃ§Ãµes pelo corpo da requisiÃ§Ã£o

app.post("/orders", statusMw, (request, response) => { // Rota para criaÃ§Ã£o dos pedidos. Metodo post (criaÃ§Ã£o)

    const { order, clienteName, price } = request.body // VariÃ¡vel para requisitar as informaÃ§Ãµes atravÃ©s do body do servidor

    const newOrder = { id: uuid.v4(), order, clienteName, price, status: "Em preparaÃ§Ã£o" } // Criar variavel para armazenar as informaÃ§Ãµes que chegam do body pelo id

    orders.push(newOrder) // Guarda os dados do body na variÃ¡vel criada para armazenamento

    return response.status(201).json(newOrder) // Retornar uma resposta para o front-end do status e as informaÃ§Ãµes do body

})

app.get("/orders", statusMw, (request, response) => { // Rota para listar todos os pedidos. Metodo get (leitura)

    return response.json(orders) // Retornar uma resposta para o front-end

})

app.put("/orders/:id", checkIdMw, statusMw, (request, response) => { // Rota para atualizar um pedido atravÃ©s do id. Metodo put (atualizaÃ§Ã£o)

    const id = request.orderId // Vem do middleware
    const index = request.orderIndex // Vem do middleware

    const { order, clienteName, price } = request.body // VariÃ¡vel para requisitar as informaÃ§Ãµes atravÃ©s do body do servidor

    const editOrder = { id, order, clienteName, price, status: "Em preparaÃ§Ã£o" } // Criar variavel para armazenar as informaÃ§Ãµes que chegam do body pelo id

    orders[index] = editOrder // Substituir as informaÃ§Ãµes do ( servidor na variÃ¡vel) com a ordem editada atravÃ©s do id 

    return response.status(201).json(editOrder) // Retornar uma resposta para o front-end apenas da ordem editada

})

app.delete("/orders/:id", checkIdMw, statusMw, (request, response) => { // Rota para deletar um pedido.  Metodo get (leitura)

    const index = request.orderIndex // Vem do middleware

    orders.splice(index, 1) // Detelar pedido do id encontrado

    return response.status(204).json() // Retornar uma resposta para o front-end

})

app.get("/orders/:id", checkIdMw, statusMw, (request, response) => { // Rota para receber um id e retornar um pedido especÃ­fico. Metodo get (leitura)

    const id = request.orderId // Vem do middleware

    const viewOrders = orders.filter(order => order.id === id) // Filtra um elemento no array atravÃ©s do Id e armazena na variÃ¡vel

    return response.json(viewOrders) // Retornar uma resposta para o front-end

})

app.patch("/orders/:id", checkIdMw, statusMw, (request, response) => { // Rota para atualizar o status do pedido

    const index = request.orderIndex // Vem do middleware

    orders[index].status = "Pronto" // Substituir as informaÃ§Ãµes do ( servidor na variÃ¡vel) com a ordem editada atravÃ©s do id 
    
    return response.status(201).json(orders[index]) // Retornar uma resposta para o front-end apenas da ordem editada

})

app.listen(port, () => {
    console.log(`ğŸš€ Server started on port ${port}`)
}) // Porta que esta sendo ouvida e mensagem para dizer que o servidor estÃ¡ sendo executado